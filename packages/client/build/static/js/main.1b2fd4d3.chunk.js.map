{"version":3,"sources":["App.js","index.js"],"names":["App","useState","grid","setGrid","arrHexagonsWithValues","setArrHexagonsWithValues","selectRef","useRef","levelState","setLevelState","gameStatus","setGameStatus","getGameStatus","useCallback","arr","map","hex1","filter","hex2","x","y","z","some","hex3","value","every","isTrue","genGrids","gridSize","hexes","i","j","push","fetchHex","fetchArr","a","hex","fetch","current","method","headers","body","JSON","stringify","response","json","result","length","calcCoordinate","constCoordinate","key","maxNumCoordinate","actionX","arrCalcsValuesHexes","sort","b","oldX","oldY","oldZ","reduce","acc","arrHexes","skipHex","forEach","index","el","flat","actionY","actionZ","handleClick","event","useEffect","document","addEventListener","removeEventListener","changeLevel","level","target","innerText","Number","className","id","ref","cn","onClick","type","data-status","width","height","size","origin","cell","find","q","r","s","data-x","data-y","data-z","data-value","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.1b2fd4d3.chunk.js","sourcesContent":["import { HexGrid, Layout, Hexagon, Text } from 'react-hexgrid';\nimport { useCallback, useEffect, useRef, useState } from 'react'\nimport cn from 'classnames'\nimport './App.css'\n\nexport const App = () => {\n  const [grid, setGrid] = useState([])\n  const [arrHexagonsWithValues, setArrHexagonsWithValues] = useState([])\n  const selectRef = useRef(null)\n  const [levelState, setLevelState] = useState(2)\n  const [gameStatus, setGameStatus] = useState('playing')\n\n  const getGameStatus = useCallback(arr => {\n    const arrComparedValues = arr.map(hex1 => {\n      const neighboursHexes = arr.filter(hex2 => {\n        if(hex1.x === hex2.x && hex1.y === hex2.y && hex1.z === hex2.z) {\n          return false\n        }\n\n        return (hex1.x === hex2.x - 1 || hex1.x === hex2.x + 1 || hex1.x === hex2.x) && \n          (hex1.y === hex2.y - 1 || hex1.y === hex2.y + 1 || hex1.y === hex2.y) &&\n          (hex1.z === hex2.z - 1 || hex1.z === hex2.z + 1 || hex1.z === hex2.z)\n      })\n\n      return neighboursHexes.some(hex3 => hex1.value === hex3.value)\n    })\n    \n    if(arrComparedValues.every(isTrue => !isTrue)) {\n      setGameStatus('game-over')\n    }\n  }, [])\n\n  const genGrids = useCallback(gridSize => {\n    const hexes = [];\n\n    for (let i = -gridSize; i <= gridSize; i++) {\n      for (let j = -gridSize; j <= gridSize; j++) {\n        if (i - j < gridSize + 1 && i - j > -(gridSize + 1)) {\n          hexes.push({x: i, y: -j, z: -i + j, value: 0});\n        }\n      }\n    }\n\n    return hexes;\n  }, [])\n\n  const fetchHex = useCallback(async fetchArr => {\n    const isSameHexesArr = arrHexagonsWithValues.map(hex => {\n      return fetchArr.some(hex2 => hex.x === hex2.x && hex.y === hex2.y && hex.value === hex2.value)\n    })\n\n    if(isSameHexesArr.every(isTrue => isTrue)) {\n      return\n    }\n    \n    const response = await fetch(`${selectRef.current.value}/${levelState}`, {\n      method: 'POST',\n\n      headers: {\n        'Content-Type': 'application/json;charset=utf-8'\n      },\n\n      body: JSON.stringify(fetchArr)\n    })\n\n    const result = await response.json();\n    setArrHexagonsWithValues([...fetchArr, ...result])\n\n    if(grid.length === arrHexagonsWithValues.length) {\n      getGameStatus([...fetchArr, ...result])\n    }\n  }, [arrHexagonsWithValues, getGameStatus, grid.length, levelState])\n\n  const calcCoordinate = useCallback((constCoordinate, key) => {\n    const maxNumCoordinate = levelState - 1\n    let maxCoordinate = constCoordinate <= 0 ? maxNumCoordinate : maxNumCoordinate - constCoordinate\n    let minCoordinate = constCoordinate >= 0 ? -maxNumCoordinate : -maxNumCoordinate - constCoordinate\n\n    if(key === 'w' || key === 'e' || key === 'd') {\n      return maxCoordinate\n    }\n\n    if (key === 's' || key === 'q' || key === 'a') {\n      return minCoordinate\n    }\n  }, [levelState])\n\n  const actionX = useCallback(key => {\n    //Отсортированный массив хексагонов по y\n    const sortArr = arrHexagonsWithValues.sort((a, b) => {\n      if(key === 'w') {\n        return a.y < b.y ? 1 : -1\n      }\n\n      return a.y > b.y ? 1 : -1\n    })\n\n    const arrCalcsCoordinates = sortArr.map(hex => {\n      let x = hex.x\n      let y = calcCoordinate(x, key)\n      return {...hex, y: y, z: -x - y, oldX: hex.x, oldY: hex.y, oldZ: hex.z}\n    })\n\n    const arraysSameCoordinates = arrCalcsCoordinates.reduce((acc, hex) => {\n      if(acc.length === 0) {\n        acc.push([hex])\n        return acc\n      }\n\n      for (let i = 0; i < acc.length; i++) {\n        if (hex.x === acc[i][0].x && hex.y === acc[i][0].y) {\n          acc[i].push(hex)\n          return acc\n        }\n      }\n\n      acc.push([hex])\n      return acc\n    }, [])\n\n    const arrCalcsValuesHexes = arraysSameCoordinates.map(arrHexes => {\n      if(arrHexes.length === 1) {\n        return arrHexes[0]\n      }\n\n      const skipHex = []\n      const result = []\n\n      arrHexes.forEach((hex, index) => {\n        //Пропустить hex по текущему индексу\n        if(skipHex.some(el => el === index)) {\n          return\n        }\n\n        let y\n\n        if(result.length > 0) {\n          y = key === 'w' ? result[result.length - 1].y - 1 : result[result.length - 1].y + 1\n        }\n\n        if(index === arrHexes.length - 1) {\n          result.push({...hex, y: y, z: -hex.x - y})\n          return\n        }\n        \n        if(hex.value === arrHexes[index + 1].value) {\n          skipHex.push(index + 1)\n\n          if(result.length > 0) {\n            result.push({...hex, y: y, z: -hex.x - y, value: hex.value + arrHexes[index + 1].value})\n            return\n          }\n\n          result.push({...hex, value: hex.value + arrHexes[index + 1].value})\n          return\n        }\n\n        if(index === 0) {\n          result.push(hex)\n          return\n        }\n\n        result.push({...hex, y: y, z: -hex.x - y})\n      })\n\n      return result\n    })\n\n    fetchHex(arrCalcsValuesHexes.flat())\n  }, [arrHexagonsWithValues, fetchHex, calcCoordinate])\n\n  const actionY = useCallback(key => {\n    //Отсортированный массив хексагонов по x\n    const sortArr = arrHexagonsWithValues.sort((a, b) => {\n      if(key === 'e') {\n        return a.x < b.x ? 1 : -1\n      }\n\n      return a.x > b.x ? 1 : -1\n    })\n\n    const arrCalcsCoordinates = sortArr.map(hex => {\n      let y = hex.y\n      let x = calcCoordinate(y, key)\n      return {...hex, x: x, z: -x - y, oldX: hex.x, oldY: hex.y, oldZ: hex.z}\n    })\n\n    const arraysSameCoordinates = arrCalcsCoordinates.reduce((acc, hex) => {\n      if(acc.length === 0) {\n        acc.push([hex])\n        return acc\n      }\n\n      for (let i = 0; i < acc.length; i++) {\n        if (hex.x === acc[i][0].x && hex.y === acc[i][0].y) {\n          acc[i].push(hex)\n          return acc\n        }\n      }\n\n      acc.push([hex])\n      return acc\n    }, [])\n\n    const arrCalcsValuesHexes = arraysSameCoordinates.map(arrHexes => {\n      if(arrHexes.length === 1) {\n        return arrHexes[0]\n      }\n\n      const skipHex = []\n      const result = []\n\n      arrHexes.forEach((hex, index) => {\n        //Пропустить hex по текущему индексу\n        if(skipHex.some(el => el === index)) {\n          return\n        }\n\n        let x\n\n        if(result.length > 0) {\n          x = key === 'e' ? result[result.length - 1].x - 1 : result[result.length - 1].x + 1\n        }\n\n        if(index === arrHexes.length - 1) {\n          result.push({...hex, x: x, z: -hex.y - x})\n          return\n        }\n        \n        if(hex.value === arrHexes[index + 1].value) {\n          skipHex.push(index + 1)\n\n          if(result.length > 0) {\n            result.push({...hex, x: x, z: -hex.y - x, value: hex.value + arrHexes[index + 1].value})\n            return\n          }\n\n          result.push({...hex, value: hex.value + arrHexes[index + 1].value})\n          return\n        }\n\n        if(index === 0) {\n          result.push(hex)\n          return\n        }\n\n        result.push({...hex, x: x, z: -hex.y - x})\n      })\n\n      return result\n    })\n\n    fetchHex(arrCalcsValuesHexes.flat())\n  }, [arrHexagonsWithValues, fetchHex, calcCoordinate])\n\n  const actionZ = useCallback(key => {\n    //Отсортированный массив хексагонов по x\n    const sortArr = arrHexagonsWithValues.sort((a, b) => {\n      if(key === 'd') {\n        return a.x < b.x ? 1 : -1\n      }\n\n      return a.x > b.x ? 1 : -1\n    })\n\n    const arrCalcsCoordinates = sortArr.map(hex => {\n      let z = hex.z\n      let x = calcCoordinate(z, key)\n      return {...hex, x: x, y: -x - z, oldX: hex.x, oldY: hex.y, oldZ: hex.z}\n    })\n\n    const arraysSameCoordinates = arrCalcsCoordinates.reduce((acc, hex) => {\n      if(acc.length === 0) {\n        acc.push([hex])\n        return acc\n      }\n\n      for (let i = 0; i < acc.length; i++) {\n        if (hex.x === acc[i][0].x && hex.y === acc[i][0].y) {\n          acc[i].push(hex)\n          return acc\n        }\n      }\n\n      acc.push([hex])\n      return acc\n    }, [])\n\n    const arrCalcsValuesHexes = arraysSameCoordinates.map(arrHexes => {\n      if(arrHexes.length === 1) {\n        return arrHexes[0]\n      }\n\n      const skipHex = []\n      const result = []\n\n      arrHexes.forEach((hex, index) => {\n        //Пропустить hex по текущему индексу\n        if(skipHex.some(el => el === index)) {\n          return\n        }\n\n        let x\n\n        if(result.length > 0) {\n          x = key === 'd' ? result[result.length - 1].x - 1 : result[result.length - 1].x + 1\n        }\n\n        if(index === arrHexes.length - 1) {\n          result.push({...hex, x: x, y: -hex.z - x})\n          return\n        }\n        \n        if(hex.value === arrHexes[index + 1].value) {\n          skipHex.push(index + 1)\n\n          if(result.length > 0) {\n            result.push({...hex, x: x, y: -hex.z - x, value: hex.value + arrHexes[index + 1].value})\n            return\n          }\n\n          result.push({...hex, value: hex.value + arrHexes[index + 1].value})\n          return\n        }\n\n        if(index === 0) {\n          result.push(hex)\n          return\n        }\n\n        result.push({...hex, x: x, y: -hex.z - x})\n      })\n\n      return result\n    })\n\n    fetchHex(arrCalcsValuesHexes.flat())\n  }, [arrHexagonsWithValues, fetchHex, calcCoordinate])\n\n  const handleClick = useCallback(event => {\n    if(event.key === 'q' || event.key === 'd') {\n      actionZ(event.key)\n      return\n    }\n\n    if(event.key === 'w' || event.key === 's') {\n      actionX(event.key)\n      return\n    }\n\n    if(event.key === 'e' || event.key === 'a') {\n      actionY(event.key)\n      return\n    }\n  }, [actionX, actionY, actionZ])\n\n  useEffect(() => {\n    document.addEventListener('keypress', handleClick)\n    return () => document.removeEventListener('keypress', handleClick)\n  }, [handleClick])\n\n  const changeLevel = useCallback(async event => {\n    const level = event.target.innerText\n    setLevelState(level)\n    setGameStatus('playing')\n    setGrid(genGrids(Number(level) - 1))\n\n    const response = await fetch(`${selectRef.current.value}/${level}`, {\n      method: 'POST',\n\n      headers: {\n        'Content-Type': 'application/json;charset=utf-8'\n      },\n\n      body: JSON.stringify([])\n    })\n\n    const result = await response.json();\n    setArrHexagonsWithValues(result)\n  }, [genGrids])\n\n  return <div className=\"app\">\n    <div className=\"controls\">\n      <div>RNG-server url</div>\n\n      <select id=\"url-server\" ref={selectRef}>\n        <option id=\"remote\" value=\"//68f02c80-3bed-4e10-a747-4ff774ae905a.pub.instances.scw.cloud\">Remote server</option>\n        <option id=\"localhost\" value=\"http://localhost:13337\">Local server</option>\n      </select>\n\n      <div className=\"buttons\">\n        Select radius:\n        <button className={cn('button', {'button_active': levelState === '2'})} onClick={changeLevel} type=\"button\">\n          2\n        </button>\n\n        <button className={cn('button', {'button_active': levelState === '3'})} onClick={changeLevel} type=\"button\">\n          3\n        </button>\n\n        <button className={cn('button', {'button_active': levelState === '4'})} onClick={changeLevel} type=\"button\">\n          4\n        </button>\n      </div>\n    </div>\n\n    <div className=\"status__text\">Game Status: <span data-status={gameStatus}>{gameStatus}</span></div>\n\n    <div className=\"field\">\n      <div className=\"hexgrid\">\n        <HexGrid width={800} height={800}>\n          <Layout size={{ x: 7, y: 7 }} flat={true} origin={{ x: 0, y: 0 }}>\n            {grid.map(cell => {\n              const includes = arrHexagonsWithValues.find(hex => {\n                return hex.x === cell.x && hex.y === cell.y && hex.z === cell.z\n              })\n\n              if(!includes) {\n                return <Hexagon className=\"hex__empty\" q={cell.x} r={cell.z} s={cell.y} >\n                  <g data-x={cell.x} data-y={cell.y} data-z={cell.z} data-value=\"0\" />\n                </Hexagon>\n              }\n\n              return <Hexagon className=\"hex__empty\" q={cell.x} r={cell.z} s={cell.y} />\n            })}\n          </Layout>\n        </HexGrid>\n      </div>\n\n      <div className=\"hexgrid__values\">\n        <HexGrid width={800} height={800}>\n          <Layout size={{ x: 7, y: 7 }} flat={true} origin={{ x: 0, y: 0 }}>\n            {arrHexagonsWithValues.map(cell => <Hexagon\n              className={cn(\n                {\n                  'color-1': cell.value === 2,\n                  'color-2': cell.value === 4,\n                  'color-3': cell.value === 8,\n                  'color-4': cell.value === 16,\n                  'color-5': cell.value === 32,\n                  'color-6': cell.value === 64,\n                  'color-7': cell.value === 128,\n                  'color-8': cell.value === 256,\n                  'color-9': cell.value === 512,\n                  'color-10': cell.value === 1024,\n                  'color-11': cell.value === 2048,\n                }\n              )}\n\n              q={cell.x}\n              r={cell.z}\n              s={cell.y}\n            >\n              <g data-x={cell.x} data-y={cell.y} data-z={cell.z} data-value={cell.value}>\n                <Text \n                  className={cn(\n                    {\n                      'color-text-1': cell.value === 2 || cell.value === 4,\n                      'color-text-2': cell.value !== 2 && cell.value !== 4,\n                    }\n                  )}\n                >{cell.value}</Text>\n              </g>\n            </Hexagon>)}\n          </Layout>\n        </HexGrid>\n      </div>\n    </div>\n  </div>\n} ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}